/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['js/mvvm.js']) {
  _$jscoverage['js/mvvm.js'] = [];
  _$jscoverage['js/mvvm.js'][1] = 0;
  _$jscoverage['js/mvvm.js'][2] = 0;
  _$jscoverage['js/mvvm.js'][3] = 0;
  _$jscoverage['js/mvvm.js'][4] = 0;
  _$jscoverage['js/mvvm.js'][8] = 0;
  _$jscoverage['js/mvvm.js'][9] = 0;
  _$jscoverage['js/mvvm.js'][12] = 0;
  _$jscoverage['js/mvvm.js'][14] = 0;
  _$jscoverage['js/mvvm.js'][16] = 0;
  _$jscoverage['js/mvvm.js'][19] = 0;
  _$jscoverage['js/mvvm.js'][22] = 0;
  _$jscoverage['js/mvvm.js'][26] = 0;
  _$jscoverage['js/mvvm.js'][27] = 0;
  _$jscoverage['js/mvvm.js'][32] = 0;
  _$jscoverage['js/mvvm.js'][33] = 0;
  _$jscoverage['js/mvvm.js'][36] = 0;
  _$jscoverage['js/mvvm.js'][37] = 0;
  _$jscoverage['js/mvvm.js'][43] = 0;
  _$jscoverage['js/mvvm.js'][44] = 0;
  _$jscoverage['js/mvvm.js'][45] = 0;
  _$jscoverage['js/mvvm.js'][46] = 0;
  _$jscoverage['js/mvvm.js'][47] = 0;
  _$jscoverage['js/mvvm.js'][58] = 0;
}
_$jscoverage['js/mvvm.js'].source = ["<span class=\"k\">function</span> MVVM<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>$options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> data <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>$options<span class=\"k\">.</span>data<span class=\"k\">;</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"c\">// &#230;&#149;&#176;&#230;&#141;&#174;&#228;&#187;&#163;&#231;&#144;&#134;</span>","    <span class=\"c\">// &#229;&#174;&#158;&#231;&#142;&#176; vm.xxx -&gt; vm._data.xxx</span>","    Object<span class=\"k\">.</span>keys<span class=\"k\">(</span>data<span class=\"k\">).</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","        me<span class=\"k\">.</span>_proxyData<span class=\"k\">(</span>key<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_initComputed<span class=\"k\">();</span>","","    observe<span class=\"k\">(</span>data<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>$compile <span class=\"k\">=</span> <span class=\"k\">new</span> Compile<span class=\"k\">(</span>options<span class=\"k\">.</span>el <span class=\"k\">||</span> document<span class=\"k\">.</span>body<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","<span class=\"k\">}</span>","","MVVM<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","    constructor<span class=\"k\">:</span> MVVM<span class=\"k\">,</span>","    $watch<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> cb<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">new</span> Watcher<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> key<span class=\"k\">,</span> cb<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _proxyData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> setter<span class=\"k\">,</span> getter<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        setter <span class=\"k\">=</span> setter <span class=\"k\">||</span>","        Object<span class=\"k\">.</span>defineProperty<span class=\"k\">(</span>me<span class=\"k\">,</span> key<span class=\"k\">,</span> <span class=\"k\">{</span>","            configurable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            get<span class=\"k\">:</span> <span class=\"k\">function</span> proxyGetter<span class=\"k\">()</span> <span class=\"k\">{</span>","                console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"MVVM get works\"</span><span class=\"k\">);</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>_data<span class=\"k\">[</span>key<span class=\"k\">];</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            set<span class=\"k\">:</span> <span class=\"k\">function</span> proxySetter<span class=\"k\">(</span>newVal<span class=\"k\">)</span> <span class=\"k\">{</span>","                console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"MVVM set works\"</span><span class=\"k\">);</span>","                me<span class=\"k\">.</span>_data<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> newVal<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _initComputed<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> computed <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>$options<span class=\"k\">.</span>computed<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> computed <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            Object<span class=\"k\">.</span>keys<span class=\"k\">(</span>computed<span class=\"k\">).</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","                Object<span class=\"k\">.</span>defineProperty<span class=\"k\">(</span>me<span class=\"k\">,</span> key<span class=\"k\">,</span> <span class=\"k\">{</span>","                    get<span class=\"k\">:</span> <span class=\"k\">typeof</span> computed<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">'function'</span>","                            <span class=\"k\">?</span> computed<span class=\"k\">[</span>key<span class=\"k\">]</span>","                            <span class=\"k\">:</span> computed<span class=\"k\">[</span>key<span class=\"k\">].</span>get<span class=\"k\">,</span>","                    set<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"bchjdwbcs\"</span><span class=\"k\">)</span>"];
_$jscoverage['js/mvvm.js'][1]++;
function MVVM(options) {
  _$jscoverage['js/mvvm.js'][2]++;
  this.$options = (options || {});
  _$jscoverage['js/mvvm.js'][3]++;
  var data = (this._data = this.$options.data);
  _$jscoverage['js/mvvm.js'][4]++;
  var me = this;
  _$jscoverage['js/mvvm.js'][8]++;
  Object.keys(data).forEach((function (key) {
  _$jscoverage['js/mvvm.js'][9]++;
  me._proxyData(key);
}));
  _$jscoverage['js/mvvm.js'][12]++;
  this._initComputed();
  _$jscoverage['js/mvvm.js'][14]++;
  observe(data, this);
  _$jscoverage['js/mvvm.js'][16]++;
  this.$compile = new Compile((options.el || document.body), this);
}
_$jscoverage['js/mvvm.js'][19]++;
MVVM.prototype = {constructor: MVVM, $watch: (function (key, cb, options) {
  _$jscoverage['js/mvvm.js'][22]++;
  new Watcher(this, key, cb);
}), _proxyData: (function (key, setter, getter) {
  _$jscoverage['js/mvvm.js'][26]++;
  var me = this;
  _$jscoverage['js/mvvm.js'][27]++;
  setter = (setter || Object.defineProperty(me, key, {configurable: false, enumerable: true, get: (function proxyGetter() {
  _$jscoverage['js/mvvm.js'][32]++;
  console.log("MVVM get works");
  _$jscoverage['js/mvvm.js'][33]++;
  return me._data[key];
}), set: (function proxySetter(newVal) {
  _$jscoverage['js/mvvm.js'][36]++;
  console.log("MVVM set works");
  _$jscoverage['js/mvvm.js'][37]++;
  me._data[key] = newVal;
})}));
}), _initComputed: (function () {
  _$jscoverage['js/mvvm.js'][43]++;
  var me = this;
  _$jscoverage['js/mvvm.js'][44]++;
  var computed = this.$options.computed;
  _$jscoverage['js/mvvm.js'][45]++;
  if (((typeof computed) === "object")) {
    _$jscoverage['js/mvvm.js'][46]++;
    Object.keys(computed).forEach((function (key) {
  _$jscoverage['js/mvvm.js'][47]++;
  Object.defineProperty(me, key, {get: (((typeof computed[key]) === "function")? computed[key]: computed[key].get), set: (function () {
})});
}));
  }
})};
_$jscoverage['js/mvvm.js'][58]++;
console.log("bchjdwbcs");
