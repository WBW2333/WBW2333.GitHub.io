/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['js/compile.js']) {
  _$jscoverage['js/compile.js'] = [];
  _$jscoverage['js/compile.js'][1] = 0;
  _$jscoverage['js/compile.js'][2] = 0;
  _$jscoverage['js/compile.js'][3] = 0;
  _$jscoverage['js/compile.js'][5] = 0;
  _$jscoverage['js/compile.js'][6] = 0;
  _$jscoverage['js/compile.js'][7] = 0;
  _$jscoverage['js/compile.js'][8] = 0;
  _$jscoverage['js/compile.js'][12] = 0;
  _$jscoverage['js/compile.js'][15] = 0;
  _$jscoverage['js/compile.js'][19] = 0;
  _$jscoverage['js/compile.js'][20] = 0;
  _$jscoverage['js/compile.js'][23] = 0;
  _$jscoverage['js/compile.js'][27] = 0;
  _$jscoverage['js/compile.js'][31] = 0;
  _$jscoverage['js/compile.js'][34] = 0;
  _$jscoverage['js/compile.js'][35] = 0;
  _$jscoverage['js/compile.js'][36] = 0;
  _$jscoverage['js/compile.js'][38] = 0;
  _$jscoverage['js/compile.js'][39] = 0;
  _$jscoverage['js/compile.js'][41] = 0;
  _$jscoverage['js/compile.js'][42] = 0;
  _$jscoverage['js/compile.js'][45] = 0;
  _$jscoverage['js/compile.js'][46] = 0;
  _$jscoverage['js/compile.js'][52] = 0;
  _$jscoverage['js/compile.js'][55] = 0;
  _$jscoverage['js/compile.js'][56] = 0;
  _$jscoverage['js/compile.js'][57] = 0;
  _$jscoverage['js/compile.js'][58] = 0;
  _$jscoverage['js/compile.js'][59] = 0;
  _$jscoverage['js/compile.js'][61] = 0;
  _$jscoverage['js/compile.js'][62] = 0;
  _$jscoverage['js/compile.js'][65] = 0;
  _$jscoverage['js/compile.js'][68] = 0;
  _$jscoverage['js/compile.js'][74] = 0;
  _$jscoverage['js/compile.js'][78] = 0;
  _$jscoverage['js/compile.js'][82] = 0;
  _$jscoverage['js/compile.js'][86] = 0;
  _$jscoverage['js/compile.js'][90] = 0;
  _$jscoverage['js/compile.js'][95] = 0;
  _$jscoverage['js/compile.js'][97] = 0;
  _$jscoverage['js/compile.js'][101] = 0;
  _$jscoverage['js/compile.js'][105] = 0;
  _$jscoverage['js/compile.js'][107] = 0;
  _$jscoverage['js/compile.js'][109] = 0;
  _$jscoverage['js/compile.js'][110] = 0;
  _$jscoverage['js/compile.js'][111] = 0;
  _$jscoverage['js/compile.js'][112] = 0;
  _$jscoverage['js/compile.js'][115] = 0;
  _$jscoverage['js/compile.js'][116] = 0;
  _$jscoverage['js/compile.js'][121] = 0;
  _$jscoverage['js/compile.js'][125] = 0;
  _$jscoverage['js/compile.js'][127] = 0;
  _$jscoverage['js/compile.js'][129] = 0;
  _$jscoverage['js/compile.js'][130] = 0;
  _$jscoverage['js/compile.js'][136] = 0;
  _$jscoverage['js/compile.js'][139] = 0;
  _$jscoverage['js/compile.js'][140] = 0;
  _$jscoverage['js/compile.js'][145] = 0;
  _$jscoverage['js/compile.js'][146] = 0;
  _$jscoverage['js/compile.js'][147] = 0;
  _$jscoverage['js/compile.js'][148] = 0;
  _$jscoverage['js/compile.js'][150] = 0;
  _$jscoverage['js/compile.js'][154] = 0;
  _$jscoverage['js/compile.js'][155] = 0;
  _$jscoverage['js/compile.js'][156] = 0;
  _$jscoverage['js/compile.js'][158] = 0;
  _$jscoverage['js/compile.js'][159] = 0;
  _$jscoverage['js/compile.js'][161] = 0;
  _$jscoverage['js/compile.js'][168] = 0;
  _$jscoverage['js/compile.js'][170] = 0;
  _$jscoverage['js/compile.js'][174] = 0;
  _$jscoverage['js/compile.js'][178] = 0;
  _$jscoverage['js/compile.js'][179] = 0;
  _$jscoverage['js/compile.js'][181] = 0;
  _$jscoverage['js/compile.js'][183] = 0;
  _$jscoverage['js/compile.js'][187] = 0;
}
_$jscoverage['js/compile.js'].source = ["<span class=\"k\">function</span> Compile<span class=\"k\">(</span>el<span class=\"k\">,</span> vm<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>$vm <span class=\"k\">=</span> vm<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>$el <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>isElementNode<span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">?</span> el <span class=\"k\">:</span> document<span class=\"k\">.</span>querySelector<span class=\"k\">(</span>el<span class=\"k\">);</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>$fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>node2Fragment<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>init<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>appendChild<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>$fragment<span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","Compile<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","    constructor<span class=\"k\">:</span> Compile<span class=\"k\">,</span>","    node2Fragment<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> fragment <span class=\"k\">=</span> document<span class=\"k\">.</span>createDocumentFragment<span class=\"k\">(),</span>","            child<span class=\"k\">;</span>","","        <span class=\"c\">// &#229;&#176;&#134;&#229;&#142;&#159;&#231;&#148;&#159;&#232;&#138;&#130;&#231;&#130;&#185;&#230;&#139;&#183;&#232;&#180;&#157;&#229;&#136;&#176;fragment</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>child <span class=\"k\">=</span> el<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","            fragment<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>child<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> fragment<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    init<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>compileElement<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>$fragment<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    compileElement<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> childNodes <span class=\"k\">=</span> el<span class=\"k\">.</span>childNodes<span class=\"k\">,</span>","            me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">[].</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>childNodes<span class=\"k\">).</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> text <span class=\"k\">=</span> node<span class=\"k\">.</span>textContent<span class=\"k\">;</span>","            <span class=\"k\">var</span> reg <span class=\"k\">=</span> <span class=\"s\">/\\{\\{(.*)\\}\\}/</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>isElementNode<span class=\"k\">(</span>node<span class=\"k\">))</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>compile<span class=\"k\">(</span>node<span class=\"k\">);</span>","","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>isTextNode<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> reg<span class=\"k\">.</span>test<span class=\"k\">(</span>text<span class=\"k\">))</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>compileText<span class=\"k\">(</span>node<span class=\"k\">,</span> RegExp<span class=\"k\">.</span>$1<span class=\"k\">.</span>trim<span class=\"k\">());</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>childNodes <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>compileElement<span class=\"k\">(</span>node<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    compile<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> nodeAttrs <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">,</span>","            me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">[].</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>nodeAttrs<span class=\"k\">).</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> attrName <span class=\"k\">=</span> attr<span class=\"k\">.</span>name<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>isDirective<span class=\"k\">(</span>attrName<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> exp <span class=\"k\">=</span> attr<span class=\"k\">.</span>value<span class=\"k\">;</span>","                <span class=\"k\">var</span> dir <span class=\"k\">=</span> attrName<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","                <span class=\"c\">// &#228;&#186;&#139;&#228;&#187;&#182;&#230;&#140;&#135;&#228;&#187;&#164;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>isEventDirective<span class=\"k\">(</span>dir<span class=\"k\">))</span> <span class=\"k\">{</span>","                    compileUtil<span class=\"k\">.</span>eventHandler<span class=\"k\">(</span>node<span class=\"k\">,</span> me<span class=\"k\">.</span>$vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> dir<span class=\"k\">);</span>","                    <span class=\"c\">// &#230;&#153;&#174;&#233;&#128;&#154;&#230;&#140;&#135;&#228;&#187;&#164;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    compileUtil<span class=\"k\">[</span>dir<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> compileUtil<span class=\"k\">[</span>dir<span class=\"k\">](</span>node<span class=\"k\">,</span> me<span class=\"k\">.</span>$vm<span class=\"k\">,</span> exp<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                node<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span>attrName<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    compileText<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        compileUtil<span class=\"k\">.</span>text<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>$vm<span class=\"k\">,</span> exp<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isDirective<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> attr<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'v-'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isEventDirective<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>dir<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> dir<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'on'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isElementNode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isTextNode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">3</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// &#230;&#140;&#135;&#228;&#187;&#164;&#229;&#164;&#132;&#231;&#144;&#134;&#233;&#155;&#134;&#229;&#144;&#136;</span>","<span class=\"k\">var</span> compileUtil <span class=\"k\">=</span> <span class=\"k\">{</span>","    text<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>bind<span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> <span class=\"s\">'text'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    html<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>bind<span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> <span class=\"s\">'html'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    model<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>bind<span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> <span class=\"s\">'model'</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","            val <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getVMVal<span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">);</span>","        node<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span><span class=\"s\">'input'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> newValue <span class=\"k\">=</span> e<span class=\"k\">.</span>target<span class=\"k\">.</span>value<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>val <span class=\"k\">===</span> newValue<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            me<span class=\"k\">.</span>_setVMVal<span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> newValue<span class=\"k\">);</span>","            val <span class=\"k\">=</span> newValue<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    class<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>bind<span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> <span class=\"s\">'class'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    bind<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> dir<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> updaterFn <span class=\"k\">=</span> updater<span class=\"k\">[</span>dir <span class=\"k\">+</span> <span class=\"s\">'Updater'</span><span class=\"k\">];</span>","","        updaterFn <span class=\"k\">&amp;&amp;</span> updaterFn<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getVMVal<span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">));</span>","","        <span class=\"k\">new</span> Watcher<span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> oldValue<span class=\"k\">)</span> <span class=\"k\">{</span>","            updaterFn <span class=\"k\">&amp;&amp;</span> updaterFn<span class=\"k\">(</span>node<span class=\"k\">,</span> value<span class=\"k\">,</span> oldValue<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// &#228;&#186;&#139;&#228;&#187;&#182;&#229;&#164;&#132;&#231;&#144;&#134;</span>","    eventHandler<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> dir<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> eventType <span class=\"k\">=</span> dir<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">':'</span><span class=\"k\">)[</span><span class=\"s\">1</span><span class=\"k\">],</span>","            fn <span class=\"k\">=</span> vm<span class=\"k\">.</span>$options<span class=\"k\">.</span>methods <span class=\"k\">&amp;&amp;</span> vm<span class=\"k\">.</span>$options<span class=\"k\">.</span>methods<span class=\"k\">[</span>exp<span class=\"k\">];</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>eventType <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","            node<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>eventType<span class=\"k\">,</span> fn<span class=\"k\">.</span>bind<span class=\"k\">(</span>vm<span class=\"k\">),</span> <span class=\"k\">false</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _getVMVal<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> val <span class=\"k\">=</span> vm<span class=\"k\">;</span>","        exp <span class=\"k\">=</span> exp<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'.'</span><span class=\"k\">);</span>","        exp<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>k<span class=\"k\">)</span> <span class=\"k\">{</span>","            val <span class=\"k\">=</span> val<span class=\"k\">[</span>k<span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> val<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _setVMVal<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>vm<span class=\"k\">,</span> exp<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> val <span class=\"k\">=</span> vm<span class=\"k\">;</span>","        exp <span class=\"k\">=</span> exp<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'.'</span><span class=\"k\">);</span>","        exp<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>k<span class=\"k\">,</span> i<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// &#233;&#157;&#158;&#230;&#156;&#128;&#229;&#144;&#142;&#228;&#184;&#128;&#228;&#184;&#170;key&#239;&#188;&#140;&#230;&#155;&#180;&#230;&#150;&#176;val&#231;&#154;&#132;&#229;&#128;&#188;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> exp<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                val <span class=\"k\">=</span> val<span class=\"k\">[</span>k<span class=\"k\">];</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                val<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"k\">var</span> updater <span class=\"k\">=</span> <span class=\"k\">{</span>","    textUpdater<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        node<span class=\"k\">.</span>textContent <span class=\"k\">=</span> <span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    htmlUpdater<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        node<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    classUpdater<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> value<span class=\"k\">,</span> oldValue<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> className <span class=\"k\">=</span> node<span class=\"k\">.</span>className<span class=\"k\">;</span>","        className <span class=\"k\">=</span> className<span class=\"k\">.</span>replace<span class=\"k\">(</span>oldValue<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\s$/</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> space <span class=\"k\">=</span> className <span class=\"k\">&amp;&amp;</span> String<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">' '</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">;</span>","","        node<span class=\"k\">.</span>className <span class=\"k\">=</span> className <span class=\"k\">+</span> space <span class=\"k\">+</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    modelUpdater<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> value<span class=\"k\">,</span> oldValue<span class=\"k\">)</span> <span class=\"k\">{</span>","        node<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['js/compile.js'][1]++;
function Compile(el, vm) {
  _$jscoverage['js/compile.js'][2]++;
  this.$vm = vm;
  _$jscoverage['js/compile.js'][3]++;
  this.$el = (this.isElementNode(el)? el: document.querySelector(el));
  _$jscoverage['js/compile.js'][5]++;
  if (this.$el) {
    _$jscoverage['js/compile.js'][6]++;
    this.$fragment = this.node2Fragment(this.$el);
    _$jscoverage['js/compile.js'][7]++;
    this.init();
    _$jscoverage['js/compile.js'][8]++;
    this.$el.appendChild(this.$fragment);
  }
}
_$jscoverage['js/compile.js'][12]++;
Compile.prototype = {constructor: Compile, node2Fragment: (function (el) {
  _$jscoverage['js/compile.js'][15]++;
  var fragment = document.createDocumentFragment(), child;
  _$jscoverage['js/compile.js'][19]++;
  while ((child = el.firstChild)) {
    _$jscoverage['js/compile.js'][20]++;
    fragment.appendChild(child);
}
  _$jscoverage['js/compile.js'][23]++;
  return fragment;
}), init: (function () {
  _$jscoverage['js/compile.js'][27]++;
  this.compileElement(this.$fragment);
}), compileElement: (function (el) {
  _$jscoverage['js/compile.js'][31]++;
  var childNodes = el.childNodes, me = this;
  _$jscoverage['js/compile.js'][34]++;
  [].slice.call(childNodes).forEach((function (node) {
  _$jscoverage['js/compile.js'][35]++;
  var text = node.textContent;
  _$jscoverage['js/compile.js'][36]++;
  var reg = /\{\{(.*)\}\}/;
  _$jscoverage['js/compile.js'][38]++;
  if (me.isElementNode(node)) {
    _$jscoverage['js/compile.js'][39]++;
    me.compile(node);
  }
  else {
    _$jscoverage['js/compile.js'][41]++;
    if ((me.isTextNode(node) && reg.test(text))) {
      _$jscoverage['js/compile.js'][42]++;
      me.compileText(node, RegExp.$1.trim());
    }
  }
  _$jscoverage['js/compile.js'][45]++;
  if ((node.childNodes && node.childNodes.length)) {
    _$jscoverage['js/compile.js'][46]++;
    me.compileElement(node);
  }
}));
}), compile: (function (node) {
  _$jscoverage['js/compile.js'][52]++;
  var nodeAttrs = node.attributes, me = this;
  _$jscoverage['js/compile.js'][55]++;
  [].slice.call(nodeAttrs).forEach((function (attr) {
  _$jscoverage['js/compile.js'][56]++;
  var attrName = attr.name;
  _$jscoverage['js/compile.js'][57]++;
  if (me.isDirective(attrName)) {
    _$jscoverage['js/compile.js'][58]++;
    var exp = attr.value;
    _$jscoverage['js/compile.js'][59]++;
    var dir = attrName.substring(2);
    _$jscoverage['js/compile.js'][61]++;
    if (me.isEventDirective(dir)) {
      _$jscoverage['js/compile.js'][62]++;
      compileUtil.eventHandler(node, me.$vm, exp, dir);
    }
    else {
      _$jscoverage['js/compile.js'][65]++;
      (compileUtil[dir] && (compileUtil[dir])(node, me.$vm, exp));
    }
    _$jscoverage['js/compile.js'][68]++;
    node.removeAttribute(attrName);
  }
}));
}), compileText: (function (node, exp) {
  _$jscoverage['js/compile.js'][74]++;
  compileUtil.text(node, this.$vm, exp);
}), isDirective: (function (attr) {
  _$jscoverage['js/compile.js'][78]++;
  return (attr.indexOf("v-") === 0);
}), isEventDirective: (function (dir) {
  _$jscoverage['js/compile.js'][82]++;
  return (dir.indexOf("on") === 0);
}), isElementNode: (function (node) {
  _$jscoverage['js/compile.js'][86]++;
  return (node.nodeType === 1);
}), isTextNode: (function (node) {
  _$jscoverage['js/compile.js'][90]++;
  return (node.nodeType === 3);
})};
_$jscoverage['js/compile.js'][95]++;
var compileUtil = {text: (function (node, vm, exp) {
  _$jscoverage['js/compile.js'][97]++;
  this.bind(node, vm, exp, "text");
}), html: (function (node, vm, exp) {
  _$jscoverage['js/compile.js'][101]++;
  this.bind(node, vm, exp, "html");
}), model: (function (node, vm, exp) {
  _$jscoverage['js/compile.js'][105]++;
  this.bind(node, vm, exp, "model");
  _$jscoverage['js/compile.js'][107]++;
  var me = this, val = this._getVMVal(vm, exp);
  _$jscoverage['js/compile.js'][109]++;
  node.addEventListener("input", (function (e) {
  _$jscoverage['js/compile.js'][110]++;
  var newValue = e.target.value;
  _$jscoverage['js/compile.js'][111]++;
  if ((val === newValue)) {
    _$jscoverage['js/compile.js'][112]++;
    return;
  }
  _$jscoverage['js/compile.js'][115]++;
  me._setVMVal(vm, exp, newValue);
  _$jscoverage['js/compile.js'][116]++;
  val = newValue;
}));
}), class: (function (node, vm, exp) {
  _$jscoverage['js/compile.js'][121]++;
  this.bind(node, vm, exp, "class");
}), bind: (function (node, vm, exp, dir) {
  _$jscoverage['js/compile.js'][125]++;
  var updaterFn = updater[(dir + "Updater")];
  _$jscoverage['js/compile.js'][127]++;
  (updaterFn && updaterFn(node, this._getVMVal(vm, exp)));
  _$jscoverage['js/compile.js'][129]++;
  new Watcher(vm, exp, (function (value, oldValue) {
  _$jscoverage['js/compile.js'][130]++;
  (updaterFn && updaterFn(node, value, oldValue));
}));
}), eventHandler: (function (node, vm, exp, dir) {
  _$jscoverage['js/compile.js'][136]++;
  var eventType = dir.split(":")[1], fn = (vm.$options.methods && vm.$options.methods[exp]);
  _$jscoverage['js/compile.js'][139]++;
  if ((eventType && fn)) {
    _$jscoverage['js/compile.js'][140]++;
    node.addEventListener(eventType, fn.bind(vm), false);
  }
}), _getVMVal: (function (vm, exp) {
  _$jscoverage['js/compile.js'][145]++;
  var val = vm;
  _$jscoverage['js/compile.js'][146]++;
  exp = exp.split(".");
  _$jscoverage['js/compile.js'][147]++;
  exp.forEach((function (k) {
  _$jscoverage['js/compile.js'][148]++;
  val = val[k];
}));
  _$jscoverage['js/compile.js'][150]++;
  return val;
}), _setVMVal: (function (vm, exp, value) {
  _$jscoverage['js/compile.js'][154]++;
  var val = vm;
  _$jscoverage['js/compile.js'][155]++;
  exp = exp.split(".");
  _$jscoverage['js/compile.js'][156]++;
  exp.forEach((function (k, i) {
  _$jscoverage['js/compile.js'][158]++;
  if ((i < (exp.length - 1))) {
    _$jscoverage['js/compile.js'][159]++;
    val = val[k];
  }
  else {
    _$jscoverage['js/compile.js'][161]++;
    val[k] = value;
  }
}));
})};
_$jscoverage['js/compile.js'][168]++;
var updater = {textUpdater: (function (node, value) {
  _$jscoverage['js/compile.js'][170]++;
  node.textContent = (((typeof value) == "undefined")? "": value);
}), htmlUpdater: (function (node, value) {
  _$jscoverage['js/compile.js'][174]++;
  node.innerHTML = (((typeof value) == "undefined")? "": value);
}), classUpdater: (function (node, value, oldValue) {
  _$jscoverage['js/compile.js'][178]++;
  var className = node.className;
  _$jscoverage['js/compile.js'][179]++;
  className = className.replace(oldValue, "").replace(/\s$/, "");
  _$jscoverage['js/compile.js'][181]++;
  var space = ((className && String(value))? " ": "");
  _$jscoverage['js/compile.js'][183]++;
  node.className = (className + space + value);
}), modelUpdater: (function (node, value, oldValue) {
  _$jscoverage['js/compile.js'][187]++;
  node.value = (((typeof value) == "undefined")? "": value);
})};
